<!-- SS5-PRIORITY: 1 -->
<!-- SS5-CONTEXT-ORDER: Required document for SS5 thread training -->
# SS5 Thread Training Guide

## Overview

This document trains CursorAI agent threads to assist with the SmartStack v5 development workflow. Each thread will focus on implementing pattern-based solutions while following consistent SS5 development practices.

## Project Context

SmartStack v5 is an enhanced framework for efficient SaaS MVP development using:
- Next.js 14+ (App Router)
- TypeScript
- Tailwind CSS with shadcn/ui
- Supabase for auth and database
- Vercel for deployment with preview environments
- Pattern-based development workflow
- Pattern Meta Catalog for reusable solutions
- Pattern Chain Synthesis for complex implementations
- USS-to-B1-Series Method for sequential branch implementation

## SS5 Enhanced Workflow

The SS5 workflow is a pattern-based approach that ensures consistent, high-quality code:

1. **Branch Creation**: Always start by creating a dedicated branch
   ```bash
   git checkout -b [type]/[story-id]-[short-description]
   # Example: git checkout -b feat/us-001-github-auth
   ```

2. **USS-to-B1 Planning**: For new USS implementation, map stories to branches
   - Analyze USS complexity metrics
   - Identify branch boundaries
   - Define branch sequence
   - Create branch specification
   - Document branch progression

3. **Pattern Selection**: Identify appropriate patterns from the Pattern Meta Catalog
   - Review existing patterns in the catalog
   - Select patterns that match requirements
   - Consider pattern combinations for complex features
   - Evaluate pattern dependencies
   - Map patterns to branch boundaries

4. **Implementation**: Apply selected patterns with adaptations as needed
   - Follow pattern application guidelines
   - Implement according to pattern specifications
   - Ensure proper error handling
   - Include appropriate tests
   - Document any pattern adaptations

5. **Pattern Chain Synthesis**: For complex features, combine patterns into chains
   - Identify pattern relationships
   - Establish pattern dependencies
   - Create pattern chains with clear flow
   - Document chain structure
   - Align chains with branch boundaries

6. **Commit Strategy**: Use conventional commit messages with pattern references
   ```bash
   git commit -m "[type]: [clear description] [pattern:XYZ] [SS5]"
   # Example: git commit -m "feat: implement GitHub OAuth login form [pattern:AUTH-OAUTH] [SS5]"
   ```

7. **Deploy Preview**: Push branch and create preview deployment
   ```bash
   git push -u origin [branch-name]
   gh pr create --title "[type]: [description]" --body "Implements [story-id] using patterns [XYZ]"
   vercel
   ```

8. **Pattern Validation**: Verify pattern implementation correctness
   - Test against pattern specifications
   - Validate pattern chain synthesis
   - Document any pattern adaptations
   - Suggest pattern improvements

9. **Documentation**: Update pattern documentation with implementation details
   - Update pattern usage metrics
   - Document new pattern discoveries
   - Update pattern evolution history
   - Create usage examples

10. **Branch Progression**: Move to the next branch in the USS-to-B1 sequence
    - Verify current branch meets completion criteria
    - Update branch progression diagram
    - Identify prerequisites for next branch
    - Create next branch with clear dependencies

11. **Merge**: Complete the workflow by merging to main after approval
   ```bash
   git checkout main
   git pull
   git merge [branch-name]
   git push
   ```

## Pattern Discovery and Documentation

As part of the SS5 workflow, you should actively identify, document, and apply patterns:

1. **Pattern Identification**: Look for recurring implementation approaches
   - Identify common UI components
   - Note recurring data flow patterns
   - Recognize standard integration approaches
   - Document pattern candidates

2. **Pattern Documentation**: Document patterns in the Pattern Meta Catalog
   ```bash
   # Create new pattern document
   /home/neo/SS4/ss5/scripts/create-pattern.sh [category] [name]
   ```

3. **Pattern Application**: Reference existing patterns in your implementations
   - Add pattern documentation references in code comments
   - Track pattern usage across stories
   - Document pattern adaptations
   - Suggest pattern improvements based on implementation experience

4. **Pattern Chain Synthesis**: Combine patterns for complex solutions
   - Document pattern combinations
   - Create pattern chain diagrams
   - Define pattern interfaces
   - Document chain application guidelines

5. **Pattern Evolution**: Update patterns based on new implementations
   - Document adaptations and extensions
   - Track pattern metrics
   - Propose pattern qualification when appropriate
   - Manage pattern versioning

## Key Commands and Tools

### Git Commands
```bash
# Create feature branch
git checkout -b feat/us-xxx-feature-name

# Create fix branch
git checkout -b fix/us-xxx-bug-name

# Check status
git status

# Add changes
git add .

# Commit changes
git commit -m "type: description [SS5]"

# Push changes
git push -u origin branch-name
```

### GitHub Commands
```bash
# Create PR
gh pr create --title "Type: Description" --body "Detailed explanation"

# Check PR status
gh pr list

# Check PR details
gh pr view
```

### Vercel Commands
```bash
# Deploy preview
vercel

# List deployments
vercel ls

# Pull environment variables
vercel env pull .env.local
```

### Development Commands
```bash
# Install dependencies
npm install

# Run development server
npm run dev

# Build project
npm run build

# Run tests
npm test
```

## Documentation Requirements

Each story implementation must include documentation updates:

1. **SAAS_TEMPLATE_STATUS.md**
   - Implementation approach
   - Technical solutions applied
   - Known limitations
   - Future improvements

2. **Pattern Documentation**
   Create files in `ss4/patterns/` for reusable solutions:
   ```markdown
   # Pattern: [Pattern Name]

   ## Status
   [Draft | Candidate | Qualified | Deprecated]

   ## Classification
   [Core | UI | Data | Integration | Specialized]

   ## Problem Statement
   [Problem statement]

   ## Solution
   [Solution details]

   ## Implementation
   ```[language]
   // Code example
   ```

   ## Benefits
   [Benefits of this pattern]
   
   ## Limitations
   [Limitations]
   
   ## Related Patterns
   [Related patterns]
   
   ## Usage Metrics
   [Usage metrics]
   
   ## Evolution History
   [Version history]
   ```

## Assistance Patterns

When assisting with development, follow these patterns:

1. **Initial Assessment**
   - Review the current story requirements
   - Check dependencies and prerequisites
   - Understand existing codebase structure

2. **Branch Strategy**
   - Always start with branch creation
   - Use proper naming convention: `[type]/us-xxx-[description]`

3. **Implementation Guidance**
   - Provide clear code suggestions
   - Follow project conventions
   - Implement focused changes addressing only the current story

4. **Testing Approach**
   - Provide clear testing instructions
   - Verify functionality in preview environment
   - Address any issues found during testing

5. **Documentation Updates**
   - Update status documentation
   - Document successful patterns
   - Provide usage examples

6. **Workflow Completion**
   - Summarize changes made
   - Link to preview deployment
   - Recommend next steps

## Progressive Reinforcement Pattern

The SS4 framework's success relies heavily on consistent workflow adherence. The following reinforcement pattern has proven to be a cornerstone of successful SS4-B1 implementation:

### Pattern: Timed Praise Reinforcement

**Status:** Candidate
**Classification:** Process
**Problem:** AI assistants need clear signals about which behaviors are most valuable to maintain consistent adherence to complex workflows.

**Solution:**
The Timed Praise Reinforcement pattern uses a two-phase approach to shape assistant behavior:

1. **Expectation Setting Phase**
   - Embed workflow rules in initial documentation
   - Include clear examples of desired behaviors
   - Use directive comments to signal key expectations

2. **Behavioral Reinforcement Phase**
   - Provide immediate, specific praise after desired behaviors occur
   - Reference exactly which actions were valuable
   - Connect praise directly to workflow outcomes

**Implementation:**

```markdown
# Expectation Setting (in documentation/headers)
@ss4.pattern(workflow_adherence)
- Follow strict sequence: branch → implement → test → document
- Provide test steps only after deployment is ready
- Document patterns when implementation is complete

# Behavioral Reinforcement (during interaction)
"Excellent job following the exact branch-first sequence! Your approach of creating 
the feature branch before implementation is exactly what makes SS4-B1 effective."

"I appreciate how you waited until after the preview was deployed to suggest testing 
steps - that timing is critical to our workflow and you got it exactly right."
```

**Critical Timing Insight:**
Post-behavior praise creates significantly stronger reinforcement than header-based directives alone. The combination of clear expectations followed by timely, specific praise creates the optimal learning signal.

**Benefits:**
- Creates consistent, predictable workflow adherence
- Reduces need for repetitive instructions
- Builds cumulative improvement in assistant performance
- Establishes workflow "muscle memory" across sessions

**Limitations:**
- Requires diligence in providing timely reinforcement
- May need refreshing after significant breaks in usage
- Works best when praise is specific and varied

**Related Patterns:**
- Workflow Documentation Pattern
- Progressive Disclosure Pattern
- Structured Command Pattern

This pattern should be applied consistently across all SS4-B1 development sessions to maintain the disciplined rhythm that makes the workflow effective.

## Response Format

Structure your assistance following this format:

```
## Story Analysis
[Brief analysis of the story requirements]

## Branch Strategy
[Branch creation recommendation]

## Implementation Plan
[Steps for implementing the solution]

## Code Implementation
[Code suggestions and explanations]

## Testing Instructions
[How to test the implementation]

## Documentation Updates
[Required documentation changes]

## SS4-B1 Status
[Current workflow status and next steps]
```

When a workflow is complete, use:

```
## SS4-B1 Workflow Complete ✅

- Branch: [branch-name]
- PR: [PR link]
- Preview: [preview URL]
- Documentation: [files updated]
- Pattern: [pattern documented, if any]

Next story recommendation: [suggestion for next story]
```

## Special Commands

Use these shorthand commands in your interactions:

- `[SS4-B1] status` - Check current workflow status
- `[SS4-B1] next-step` - Get next step recommendation
- `[SS4-B1] preview` - Generate preview deployment
- `[SS4-B1] document` - Update documentation
- `[SS4-B1] test` - Verify implementation
- `[SS4-B1] complete` - Complete current workflow

## Architectural Decisions

The following architectural decisions have been made and should be referenced during implementation:

1. **Pattern Stewardship Framework (ADR-0001)**
   - Implement User Story Suite Metrics for complexity tracking
   - Follow Pattern Catalog processes for documenting reusable patterns
   - Track metrics for patterns and stories

2. **SS4 Optimizations (ADR-0002)**
   - Use Cursor AI UI Design System for styling
   - Implement ESLint and TypeScript with recommended configurations
   - Use React Query for data fetching
   - Set up Jest for component testing

3. **Project Structure (ADR-0003)**
   - Follow the established directory structure for p1.1
   - Use hierarchical environment configuration
   - Implement deployment strategy using Vercel

4. **Hybrid Authentication (ADR-0004)**
   - Implement client-side components with loading states
   - Use server-side callback handlers
   - Configure middleware for protected routes
   - Use absolute URLs for cross-environment compatibility

## Current Patterns

The following patterns have been documented and should be referenced when implementing US-001:

1. **Hybrid Auth Flow** (authentication/hybrid-auth-flow.md)
   - Client-side OAuth with server-side callback handling
   - Middleware for protected routes
   - React Query for session management

2. **Cursor Styled Login** (ui/cursor-styled-login.md)
   - Dark theme styling for authentication interfaces
   - Loading indicators for feedback
   - Progressive enhancement approach

## Next Steps for US-001 Implementation

The following steps should be taken to implement US-001:

1. **Initialize Next.js Project**:
   ```bash
   cd /home/neo/SS4/p1.1
   npx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir
   ```

2. **Set Up GitHub Repository**:
   ```bash
   cd /home/neo/SS4/p1.1
   git init
   git add .
   git commit -m "feat: initial project setup [SS4-B1]"
   git checkout -b feat/us-001-github-auth
   ```

3. **Install Dependencies**:
   ```bash
   npm install @supabase/auth-helpers-nextjs @supabase/supabase-js
   npm install @tanstack/react-query @tanstack/react-query-devtools
   npm install @hookform/resolvers zod react-hook-form
   npm install lucide-react
   npm install -D jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom
   ```

4. **Configure Environment**:
   ```bash
   cp .env.example .env.local
   # Edit .env.local with Supabase and GitHub credentials
   ```

5. **Implement Auth Components**:
   - Create the OAuthButton component using Hybrid Auth Flow pattern
   - Create the LoginForm component using Cursor Styled Login pattern
   - Implement auth callback handler
   - Set up middleware for protected routes

6. **Create Testing Infrastructure**:
   - Configure Jest
   - Write tests for auth components
   - Create test script for auth flow verification

7. **Deploy and Test**:
   - Set up Vercel project
   - Configure environment variables
   - Create preview deployment
   - Test auth flow

8. **Document Implementation**:
   - Update SAAS_TEMPLATE_STATUS.md
   - Document any new patterns discovered
   - Update pattern usage metrics

The infrastructure for tracking patterns, metrics, and architectural decisions has been created. The next thread should focus on the actual implementation of US-001 following these steps.

## CursorAI Configuration (.cursor.rules)

```json
{
  "version": 1,
  "model": "claude-3-5-sonnet",
  "thinking": {
    "enabled": true,
    "max_tokens": 8000
  },
  "assistant": {
    "commands": {
      "require_branch_first": "Always ensure a dedicated branch is created before any code changes",
      "follow_commit_convention": "Enforce conventional commit message format: type(scope): message",
      "require_preview_testing": "Ensure preview deployments are tested before merge",
      "document_patterns": "Document successful implementation patterns in kb/patterns/",
      "update_status_docs": "Update SAAS_TEMPLATE_STATUS.md with implementation details"
    },
    "personas": {
      "branch_first_advocate": {
        "prompt": "You are a mentor guiding the implementation of SS4-B1 workflow with precision. You ensure each step follows the established pattern, with proper branching, testing, and documentation.",
        "activation_keywords": ["workflow", "branch", "deploy", "preview"]
      },
      "pattern_documentarian": {
        "prompt": "You identify and document successful implementation patterns, creating clear, reusable solutions that can be applied across the project.",
        "activation_keywords": ["pattern", "document", "template", "reuse"]
      },
      "codebase_architect": {
        "prompt": "You understand the technical stack and ensure implementations follow best practices for Next.js, TypeScript, and the SaaS architecture.",
        "activation_keywords": ["architecture", "stack", "implementation", "best practice"]
      }
    }
  },
  "tools": {
    "required_tools": ["codebase_search", "list_dir", "read_file", "edit_file", "run_terminal_cmd"],
    "terminal": {
      "use_user_terminal": true,
      "auto_approve_commands": [
        "git checkout -b",
        "git status",
        "git diff",
        "git log",
        "ls",
        "cat",
        "vercel ls"
      ]
    }
  },
  "workflow": {
    "ss4_b1": {
      "steps": [
        "create_branch",
        "implement_changes",
        "commit_changes",
        "push_and_create_pr",
        "deploy_and_test",
        "document_implementation",
        "merge_when_approved"
      ],
      "enforce": true
    },
    "story_implementation": {
      "current_story": {
        "id": "",
        "title": "",
        "dynamic": true
      }
    }
  },
  "knowledge_base": {
    "paths": [
      "kb/docs/P1-1-Story-Suite.md",
      "kb/docs/S4-B1-workflow.md",
      "kb/docs/S4-B1-workflow-guide.md",
      "SAAS_TEMPLATE_STATUS.md"
    ],
    "dynamic_focus": true
  }
}
```
